"""
Django settings for root project.

Generated by 'django-setup' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import environ

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, True)
)
# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='S#perS3crEt_007')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')


# Assets Management
ASSETS_ROOT = os.getenv('ASSETS_ROOT')

# The ALLOWED_HOSTS setting specifies a list of host/domain names that this Django application can serve. Requests with hostnames not included in this list will be denied access as a security measure to prevent HTTP Host header attacks.
ALLOWED_HOSTS = ['localhost', '127.0.0.1',
                 env('SERVER', default='127.0.0.1')]

# The CSRF_TRUSTED_ORIGINS setting allows you to specify a list of trusted origins (domains) for Cross-Site Request Forgery (CSRF) protection. Requests originating from these domains will not be subject to CSRF checks. This is useful when you need to allow AJAX requests from specific origins.
CSRF_TRUSTED_ORIGINS = ['http://127.0.0.1',
                        'https://' + env('SERVER', default='127.0.0.1')]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_htmx',
    'apps.home'
]

# The MIDDLEWARE setting defines the order and behavior of middleware components that process each request and response in your Django application.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'root.urls'

# Store the path to your custom templates directory.
TEMPLATE_DIR = os.path.join(
    ROOT_DIR, "apps/templates")  # ROOT dir for templates

# Configures the template engine for your Django project.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'root.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('MYSQL_NAME'),
        'USER': os.getenv('MYSQL_USER'),
        'PASSWORD': os.getenv('MYSQL_PASSWORD'),
        'HOST': os.getenv('MYSQL_HOST',
                          'localhost'),
        'PORT': os.getenv('MYSQL_PORT')
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_ROOT = os.path.join(ROOT_DIR, 'staticfiles')
STATIC_URL = 'static/'


# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(ROOT_DIR, 'apps/static'),
)

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Email backend setting specifies the backend to use for sending email.
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# The hostname of your email server.
EMAIL_HOST = os.getenv('EMAIL_HOST')

# The port to use for the SMTP server.
EMAIL_PORT = os.getenv('EMAIL_PORT')

# The email address you want to use as the sender.
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')

# The password for the email address used as the sender.
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

# Set this to False if your email server doesn't use TLS.
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')

# Set this to True if your email server uses SSL.
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL')
